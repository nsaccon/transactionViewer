{"version":3,"sources":["utils/GraphQLData.js","components/header.js","components/transaction.js","components/user.js","App.js","reportWebVitals.js","index.js"],"names":["faker","seed","currencies","arrayOfLength","n","mapFunction","Array","from","map","randomArrayElement","array","random","number","min","max","length","merchants","currency","name","company","companyName","networkId","users","id","firstName","lastName","cardId","transactions","amountInUSDCents","date","recent","merchantNetworkId","wait","Promise","resolve","setTimeout","randomNetworkDelay","result","a","getMerchants","getTransactions","getUsers","Header","isUSD","currencyChange","className","data-testid","defaultChecked","icons","checked","color","unchecked","onChange","Transaction","amountStr","transactionData","merchant","find","val","toLocaleString","style","amountInCADCents","split","User","userData","merchantData","filter","t","totalCents","i","Accordion","defaultActiveKey","Card","Toggle","as","Button","variant","eventKey","Collapse","Body","transaction","Content","styled","div","App","fetched","useState","setUsers","setMerchants","setTransactions","setIsUSD","request","transactionsAddCAD","sort","b","transactionsLst","useEffect","fetchUsers","fetchTransactions","fetchMerchants","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a91717af.chunk.js","sourcesContent":["import faker from 'faker';\n\nconst seed = 20201242;\n\n// Change this to get the test a new set of data\nfaker.seed(seed);\n\nconst currencies = ['USD', 'CAD'];\nconst arrayOfLength = (n, mapFunction) => Array.from(Array(n)).map(mapFunction);\nconst randomArrayElement = (array) => array[faker.random.number({ min: 0, max: array.length - 1 })];\n\nconst merchants = arrayOfLength(faker.random.number({ min: 5, max: 13 }), () => ({\n  currency: randomArrayElement(currencies),\n  name: faker.company.companyName(),\n  networkId: `${faker.random.number({ min: 100000, max: 700000 })}`\n}));\n\nconst users = arrayOfLength(faker.random.number({ min: 10, max: 18 }), () => ({\n  id: faker.random.number({ min: 3, max: 150 }),\n  firstName: faker.name.firstName(),\n  lastName: faker.name.lastName(),\n  cardId: `sk_${faker.random.number({ min: 100000000, max: 700000000 })}`\n}));\n\nconst transactions = arrayOfLength(faker.random.number({ min: 100, max: 180 }), () => ({\n  id: `${faker.random.number({ min: 100000, max: 700000 })}`,\n  amountInUSDCents: faker.random.number({ min: 100, max: 10000 }),\n  date: faker.date.recent(10),\n  merchantNetworkId: randomArrayElement(merchants).networkId,\n  cardId: randomArrayElement(users).cardId,\n}));\n\nconst wait = (n) => new Promise(resolve => setTimeout(resolve, n));\nconst randomNetworkDelay = async (result) => {\n  await wait(faker.random.number({ min: 1200, max: 3000 }));\n  return result;\n}\n\nexport const getMerchants = () => randomNetworkDelay(merchants);\nexport const getTransactions = () => randomNetworkDelay(transactions);\nexport const getUsers = () => randomNetworkDelay(users);","import React from \"react\";\r\nimport \"./header.css\";\r\nimport Toggle from \"react-toggle\";\r\nimport \"../css/toggle.css\";\r\nimport { FaCanadianMapleLeaf, FaFlagUsa } from \"react-icons/fa\";\r\n\r\nconst Header = ({ isUSD, currencyChange }) => {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1 className=\"header_title\" data-testid=\"header_title_test\">\r\n        User Transactions\r\n      </h1>\r\n      <div className=\"header_currency\">\r\n        <label>\r\n          <Toggle\r\n            className=\"header_currencyToggle\"\r\n            data-testid=\"header_currencyToggle_test\"\r\n            defaultChecked={isUSD}\r\n            icons={{\r\n              checked: <FaFlagUsa color=\"darkred\" />,\r\n              unchecked: <FaCanadianMapleLeaf color=\"white\" />,\r\n            }}\r\n            onChange={currencyChange}\r\n          />\r\n        </label>\r\n        <span\r\n          className=\"header_currencyType\"\r\n          data-testid=\"header_currencyType_test\"\r\n        >\r\n          Currency: {isUSD ? \"USD\" : \"CAD\"}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./transaction.css\";\r\n\r\nconst Transaction = ({ transactionData, merchants, isUSD }) => {\r\n  let merchant = merchants.find(\r\n    (val) => val.networkId === transactionData.merchantNetworkId\r\n  );\r\n  let amountStr;\r\n  if(isUSD){\r\n    amountStr = (transactionData.amountInUSDCents / 100).toLocaleString(\"en-US\",{ style: \"currency\", currency: \"USD\" });\r\n  }else{\r\n    amountStr = (transactionData.amountInCADCents / 100).toLocaleString(\"en-US\",{ style: \"currency\", currency: \"USD\" });\r\n  }\r\n  \r\n  return (\r\n    <tr key={transactionData.id} className='transaction_details' data-testid=\"transaction_details_test\">\r\n      <td className='transaction_date' data-testid=\"transaction_date_test\">{transactionData.date.toLocaleString().split(',')[0]}</td>\r\n      <td className='transaction_nameMerchant' data-testid=\"transaction_nameMerchant_test\">{merchant.name}</td>\r\n      <td className='transaction_amount' data-testid=\"transaction_amount_test\">{amountStr} {isUSD ? \"USD\" : \"CAD\"}</td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default Transaction;\r\n","import React from \"react\";\r\nimport { Accordion, Button, Card } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./user.css\";\r\nimport Transaction from \"./transaction\";\r\n\r\nconst User = ({ userData, transactionData, merchantData, isUSD }) => {\r\n  transactionData = transactionData.filter((t) => t.cardId == userData.cardId);\r\n\r\n  let totalCents = 0;\r\n  for (let i = 0; i < transactionData.length; i++) {\r\n    if(isUSD){\r\n      totalCents += transactionData[i].amountInUSDCents;\r\n    }else{\r\n      totalCents += transactionData[i].amountInCADCents;\r\n    }\r\n    \r\n  }\r\n  totalCents = (totalCents / 100).toLocaleString(\"en-US\", {\r\n    style: \"currency\",\r\n    currency: \"USD\",\r\n  });\r\n\r\n  function currencyString() {\r\n    if (isUSD) {\r\n      return \"USD\";\r\n    } else {\r\n      return \"CAD\";\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"user\" data-testid=\"user_test\">\r\n      {userData ? (\r\n        <Accordion defaultActiveKey=\"1\">\r\n          <Card>\r\n            <Card.Header>\r\n              <Accordion.Toggle as={Button} variant=\"text\" eventKey=\"0\">\r\n                <div className=\"user_detail\" data-testid=\"user_detail_test\">\r\n                  <div className=\"user_name\" data-testid=\"user_name_test\">\r\n                    {userData.firstName} {userData.lastName}\r\n                  </div>\r\n                  <div className=\"user_total\" data-testid=\"user_total_test\">\r\n                    Total: {totalCents} {currencyString()}\r\n                  </div>\r\n                </div>\r\n              </Accordion.Toggle>\r\n            </Card.Header>\r\n            <Accordion.Collapse eventKey=\"0\">\r\n              <Card.Body>\r\n                <table\r\n                  className=\"user_transactionTable\"\r\n                  data-testid=\"user_transactionTable_test\"\r\n                >\r\n                  <tbody>\r\n                    <tr>\r\n                      <th\r\n                        className=\"user_tableHeaderDate\"\r\n                        data-testid=\"user_tableHeaderDate_test\"\r\n                      >\r\n                        Date\r\n                      </th>\r\n                      <th\r\n                        className=\"user_tableHeaderMerchant\"\r\n                        data-testid=\"user_tableHeaderMerchant_test\"\r\n                      >\r\n                        Merchant\r\n                      </th>\r\n                      <th\r\n                        className=\"user_tableHeaderAmount\"\r\n                        data-testid=\"user_tableHeaderAmount_test\"\r\n                      >\r\n                        Amount\r\n                      </th>\r\n                    </tr>\r\n                    {transactionData ? (\r\n                      transactionData.map((transaction) => (\r\n                        <Transaction\r\n                        isUSD={isUSD}\r\n                          transactionData={transaction}\r\n                          merchants={merchantData}\r\n                        />\r\n                      ))\r\n                    ) : (\r\n                      <tr>\r\n                        <td\r\n                          className=\"user_tableHeaderDate\"\r\n                          data-testid=\"user_tableHeaderDate_test\"\r\n                        >\r\n                          Date\r\n                        </td>\r\n                        <td\r\n                          className=\"user_tableHeaderMerchant\"\r\n                          data-testid=\"user_tableHeaderMerchant_test\"\r\n                        >\r\n                          Merchant\r\n                        </td>\r\n                        <td\r\n                          className=\"user_tableHeaderAmount\"\r\n                          data-testid=\"user_tableHeaderAmount_test\"\r\n                        >\r\n                          Amount\r\n                        </td>\r\n                      </tr>\r\n                    )}\r\n                  </tbody>\r\n                </table>\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        </Accordion>\r\n      ) : (\r\n        <div>No users found</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","import styled from \"@emotion/styled\";\nimport React, { useState, useEffect } from \"react\";\nimport { getMerchants, getTransactions, getUsers } from \"./utils/GraphQLData\";\nimport Header from \"./components/header\";\nimport User from \"./components/user\";\nimport './App.css'\n\nconst Content = styled.div`\n  box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.08);\n  padding: 10px;\n`;\n\nfunction App() {\n  let fetched = false;\n  const [users, setUsers] = useState([]);\n  const [merchants, setMerchants] = useState([]);\n  const [transactions, setTransactions] = useState([]);\n  const [isUSD, setIsUSD] = useState(true);\n\n  async function fetchUsers() {\n    const request = await getUsers();\n    setUsers(request);\n    return request;\n  }\n  async function fetchMerchants() {\n    const request = await getMerchants();\n    setMerchants(request);\n    return request;\n  }\n  async function fetchTransactions() {\n    let request = await getTransactions();\n    request = request.sort((a, b) => b.date - a.date);\n    transactionsAddCAD(request);\n    setTransactions(request);\n    return request;\n  }\n\n  function onCurrencyChange(){\n    setIsUSD(!isUSD);\n  }\n\n  function transactionsAddCAD(transactionsLst){\n    for (let i = 0; i < transactionsLst.length; i++) {\n      transactionsLst[i].amountInCADCents = transactionsLst[i].amountInUSDCents * 1.2;\n    }\n  }\n\n  useEffect(() => {\n    if (!fetched) {\n      fetchUsers();\n      fetchTransactions();\n      fetchMerchants();\n    }\n    return () => {\n      fetched = true;\n    };\n  });\n\n  return (\n    <Content>\n      <Header isUSD={isUSD} currencyChange={onCurrencyChange} />\n      <div className=\"app_users\">\n      {users.length > 0 ? (\n        users.map((user) => (\n          <User key={user.id}\n            userData={user}\n            transactionData={transactions}\n            merchantData={merchants}\n            isUSD={isUSD}\n          />\n        ))\n      ) : (\n        <div>No Users found</div>\n      )}\n      </div>\n      \n    </Content>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}